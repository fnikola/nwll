<?php

function paypal_ipn_menu() {
  $items = array();

  $items['paypal/payment/ipn'] = array(
      'title' => t('Paypal Payment IPN'),
      'description' => t('Paypal Payment IPN'),
      'type' => MENU_CALLBACK,
      'page callback' => 'paypal_ipn_payment_paypal_ipn_callback',
      'access callback' => TRUE,
    );

  return $items;
}

function paypal_ipn_payment_paypal_ipn_callback () {
  //watchdog('paypal', 'Starting');

  header("Content-type: text/html");
  header("Expires: Wed, 29 Jan 1975 04:15:00 GMT");
  header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
  header("Cache-Control: no-cache, must-revalidate");
  header("Pragma: no-cache");

  //watchdog('paypal', '1');

  // read the post from PayPal system and add 'cmd'
  $req = 'cmd=_notify-validate';

  foreach ($_POST as $key => $value) {
    $value = urlencode(stripslashes($value));
    $req .= "&$key=$value";
  }

  //watchdog('paypal', '2');
  //watchdog('paypal', '2.5 - '.$req);

  $nwll_season = variable_get('nwll_season');
  $nwll_year = variable_get('nwll_year');
  $nwll_invoice_season = variable_get('nwll_invoice_season');
  $nwll_paypal_env = variable_get('nwll_paypal_env');

  // post back to PayPal system to validate
  $header .= "POST /cgi-bin/webscr HTTP/1.0\r\n";
  $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
  if ($nwll_paypal_env == 'sandbox') {
    $header .= "Host: www.sandbox.paypal.com\r\n";
    $fp = fsockopen ('ssl://www.sandbox.paypal.com', 443, $errno, $errstr, 30);
    drupal_set_message($nwll_paypal_env);
    $nwll_paypal_env_table = 'paypal_ipn_sandbox';
  } else {
    $header .= "Host: www.paypal.com\r\n";
    $fp = fsockopen ('ssl://www.paypal.com', 443, $errno, $errstr, 30);
    $nwll_paypal_env_table = 'paypal_ipn';
  }
  $header .= "Content-Length: " . strlen($req) . "\r\n\r\n";

  if (!$fp) {
    watchdog('paypal', 'HTTP error');
  } else {
    fputs ($fp, $header . $req);
    watchdog('paypal', $header . $req);

    while (!feof($fp)) {
      $res = fgets ($fp, 1024);

      //watchdog('paypal', '3 - '.$res);

      if (strcmp ($res, "VERIFIED") == 0) {
        // assign posted variables to local variables
        $txn_id = $_POST['txn_id'];

        //watchdog('paypal', '3.5 - '.$txn_id);

        //Information about you:
        $receiver_email = $_POST['receiver_email'];
        $receiver_id = $_POST['receiver_id'];
        $residence_country = $_POST['residence_country'];

        //Information about the transaction:
        $test_ipn = $_POST['test_ipn'];
        $transaction_subject = $_POST['transaction_subject'];
        $txn_type = $_POST['txn_type'];

        //Information about your buyer:
        $payer_email = $_POST['payer_email'];
        $payer_id  = $_POST['payer_id '];
        $payer_status = $_POST['payer_status'];
        $first_name = $_POST['first_name'];
        $last_name = $_POST['last_name'];
        $address_city = $_POST['address_city'];
        $address_country = $_POST['address_country'];
        $address_country_code = $_POST['address_country_code'];
        $address_name = $_POST['address_name'];
        $address_state = $_POST['address_state'];
        $address_status = $_POST['address_status'];
        $address_street = $_POST['address_street'];
        $address_zip = $_POST['address_zip'];
        
        //Information about the payment:
        $handling_amount = $_POST['handling_amount'];
        $item_name = $_POST['item_name'];
        $item_number = $_POST['item_number'];
        $mc_currency = $_POST['mc_currency'];
        $mc_fee = $_POST['mc_fee'];
        $mc_gross = $_POST['mc_gross'];
        $payment_date = $_POST['payment_date'];
        $payment_fee = $_POST['payment_fee'];
        $payment_gross = $_POST['payment_gross'];
        $payment_status = $_POST['payment_status'];
        $payment_type = $_POST['payment_type'];
        $protection_eligibility = $_POST['protection_eligibility'];
        $quantity = $_POST['quantity'];
        $shipping = $_POST['shipping'];
        $tax = $_POST['tax'];

        //Other information about the transaction:
        $notify_version = $_POST['notify_version'];
        $charset = $_POST['charset'];
        $verify_sign = $_POST['verify_sign'];

        $normalized_payment_date = strptime($payment_date, '%H:%M:%S %b %e, %Y %Z');
        $normalized_payment_date = (1900 + $normalized_payment_date['tm_year']) . '/' .
                                      (1 + str_pad($normalized_payment_date['tm_mon'], 2, '0', STR_PAD_LEFT)) . '/' .
                                      (str_pad($normalized_payment_date['tm_mday'], 2, '0', STR_PAD_LEFT));

        //Custom transaction info:
        $custom = $_POST['custom'];
        $invoice = $_POST['invoice'];


        //watchdog('paypal', '4');

        // check the payment_status is Completed
        // check that txn_id has not been previously processed
        // check that receiver_email is your Primary PayPal email
        // check that payment_amount/payment_currency are correct
        // process payment

        //$results = db_query('SELECT * FROM {paypal_ipn} WHERE txn_id = "%s"', $txn_id);
        //if (!db_fetch_object($results)) {
        if (!db_query("SELECT * FROM {".$nwll_paypal_env_table."} WHERE txn_id = :txn_id", array(':txn_id' => $txn_id))->fetchField()) {
          //watchdog('paypal', '4.5');

          if ($nwll_paypal_env == 'sandbox') {
                  try {
                    $pid = db_insert('paypal_ipn_sandbox')
                      ->fields(array(
                      'txn_id' => $txn_id,
                      'receiver_email' => $receiver_email,
                      'receiver_id' => $receiver_id,
                      'residence_country' => $residence_country,
                      'test_ipn' => $test_ipn,
                      'transaction_subject' => $transaction_subject,
                      'txn_type' => $txn_type,
                      'payer_email' => $payer_email,
                      'payer_id' => $payer_id,
                      'payer_status' => $payer_status,
                      'first_name' => $first_name,
                      'last_name' => $last_name,
                      'address_city' => $address_city,
                      'address_country' => $address_country,
                      'address_country_code' => $address_country_code,
                      'address_name' => $address_name,
                      'address_state' => $address_state,
                      'address_status' => $address_status,
                      'address_street' => $address_street,
                      'address_zip' => $address_zip,
                      'handling_amount' => $handling_amount,
                      'item_name' => $item_name,
                      'item_number' => $item_number,
                      'mc_currency' => $mc_currency,
                      'mc_fee' => $mc_fee,
                      'mc_gross' => $mc_gross,
                      'payment_date' => $payment_date,
                      'payment_fee' => $payment_fee,
                      'payment_gross' => $payment_gross,
                      'payment_status' => $payment_status,
                      'payment_type' => $payment_type,
                      'protection_eligibility' => $protection_eligibility,
                      'quantity' => $quantity,
                      'shipping' => $shipping,
                      'tax' => $tax,
                      'notify_version' => $notify_version,
                      'charset' => $charset,
                      'verify_sign' => $verify_sign,
                      'normalized_payment_date' => $normalized_payment_date,
                      'custom' => $custom,
                      'invoice' => $invoice,
                    ))
                    ->execute();
                  }
                  catch (Exception $e) {
                    // Log the exception to watchdog.
                    watchdog('paypal', '4.6 - '.$e);
                    watchdog_exception('type', $e);
                  }
          } else {
                  try {
                    $pid = db_insert('paypal_ipn')
                      ->fields(array(
                      'txn_id' => $txn_id,
                      'receiver_email' => $receiver_email,
                      'receiver_id' => $receiver_id,
                      'residence_country' => $residence_country,
                      'test_ipn' => $test_ipn,
                      'transaction_subject' => $transaction_subject,
                      'txn_type' => $txn_type,
                      'payer_email' => $payer_email,
                      'payer_id' => $payer_id,
                      'payer_status' => $payer_status,
                      'first_name' => $first_name,
                      'last_name' => $last_name,
                      'address_city' => $address_city,
                      'address_country' => $address_country,
                      'address_country_code' => $address_country_code,
                      'address_name' => $address_name,
                      'address_state' => $address_state,
                      'address_status' => $address_status,
                      'address_street' => $address_street,
                      'address_zip' => $address_zip,
                      'handling_amount' => $handling_amount,
                      'item_name' => $item_name,
                      'item_number' => $item_number,
                      'mc_currency' => $mc_currency,
                      'mc_fee' => $mc_fee,
                      'mc_gross' => $mc_gross,
                      'payment_date' => $payment_date,
                      'payment_fee' => $payment_fee,
                      'payment_gross' => $payment_gross,
                      'payment_status' => $payment_status,
                      'payment_type' => $payment_type,
                      'protection_eligibility' => $protection_eligibility,
                      'quantity' => $quantity,
                      'shipping' => $shipping,
                      'tax' => $tax,
                      'notify_version' => $notify_version,
                      'charset' => $charset,
                      'verify_sign' => $verify_sign,
                      'normalized_payment_date' => $normalized_payment_date,
                      'custom' => $custom,
                      'invoice' => $invoice,
                    ))
                    ->execute();
                  }
                  catch (Exception $e) {
                    // Log the exception to watchdog.
                    watchdog('paypal', '4.6 - '.$e);
                    watchdog_exception('type', $e);
                  }
          }


          //watchdog('paypal', '5');

//          db_query('INSERT INTO {paypal_ipn} (' .
//                    'txn_id, ' .
//                    'receiver_email, receiver_id, residence_country, ' .
//                    'test_ipn, transaction_subject, txn_type, ' .
//                    'payer_email, payer_id, payer_status, first_name, last_name, address_city, address_country, address_country_code, address_name, address_state, address_status, address_street, address_zip, ' .
//                    'handling_amount, item_name, item_number, mc_currency, mc_fee, mc_gross, payment_date, payment_fee, payment_gross, payment_status, payment_type, protection_eligibility, quantity, shipping, tax, ' .
//                    'notify_version, charset, verify_sign, ' .
//                    'normalized_payment_date' .
//                    ') VALUES ('.
//                    '"%s", "%s", ' .
//                    '"%s", "%s", "%s", ' .
//                    '"%s", "%s", "%s", ' .
//                    '"%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", ' .
//                    '"%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", ' .
//                    '"%s", "%s", "%s", ' .
//                    '"%s"' .
//                    ');',
//                    $txn_id,
//                    $receiver_email, $receiver_id, $residence_country,
//                    $test_ipn, $transaction_subject, $txn_type,
//                    $payer_email, $payer_id, $payer_status, $first_name, $last_name, $address_city, $address_country, $address_country_code, $address_name, $address_state, $address_status, $address_street, $address_zip,
//                    $handling_amount, $item_name, $item_number, $mc_currency, $mc_fee, $mc_gross, $payment_date, $payment_fee, $payment_gross, $payment_status, $payment_type, $protection_eligibility, $quantity, $shipping, $tax,
//                    $notify_version, $charset, $verify_sign,
//                    $normalized_payment_date
//                    );

          watchdog('paypal', 'Paypal payment received with transaction id @txn_id.', array('@txn_id' => $txn_id), WATCHDOG_NOTICE);

          global $user;

          $payer_subject = 'Payment Confirmation';
          $payer_body = <<<BODY
Dear $address_name,

This is a payment receipt for transaction $txn_id on $payment_date for "$item_name";

Note: This email will serve as an official receipt for this payment.

Billing & Support Area
Your Company Name
BODY;

          //drupal_mail('paypal', 'payer_confirmation', $payer_email, user_preferred_language($user), array());


          $admin_subject = 'Payment Confirmation: $txn_id';
          $payer_body = <<<BODY
A payment has been made for $mc_currency $payment_gross for Item Number: $item_number ($item_name).
The PayPal transaction id is: $txn_id;

Payer Details:
Email: $payer_email
Name: $address_name
Street: $address_street
City: $address_city
Zip: $address_zip
Country: $address_country

Payment Details:
Date: $payment_date
Fee: $payment_fee
Gross: $payment_gross
Quantity: $quantity

Billing & Support Area
Your Company Name
BODY;

          //drupal_mail('paypal', 'admin_confirmation', $receiver_email, user_preferred_language($user), array());

          //watchdog('paypal', 'Mails sent @txn_id.', array('@txn_id' => $txn_id), WATCHDOG_NOTICE);
        }

        //Insert payment
        //global $user;
        $node = new stdClass(); // Create a new node object
        $node->type = "payment"; // Or page, or whatever content type you like
        node_object_prepare($node); // Set some default values
        $profile = user_load($custom);
        $node->title = $profile->field_last_name['und'][0]['value'].'-'.$profile->field_first_name['und'][0]['value'].'-'.$custom;
        $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
        $node->uid = $custom; // UID of the author of the node; or use $node->name
        $node->field_payment_user_ref[$node->language][]['uid'] = $custom;
        $node->field_year[$node->language][0]['value'] = $nwll_year.'-01-01 00:00:00'; //2013-00-00 00:00:00
        $node->field_season[$node->language][0]['value'] = $nwll_invoice_season;
        date_default_timezone_set('America/New_York');
        $node->field_payment_date[$node->language][0]['value'] = date('Y-m-d H:i:s', REQUEST_TIME); //REQUEST_TIME
        //drupal_set_message(date_default_timezone_get());
        $node->field_payment_type[$node->language][0]['value'] = "PayPal";
        $node->field_payment_amount[$node->language][0]['value'] = $mc_gross;
        $node->field_status[$node->language][0]['value'] = $payment_status;
        $node->field_payment_invoice[$node->language][0]['value'] = $invoice;
        $node->field_paypal_txn_id[$node->language][0]['value'] = $txn_id;
        if($node = node_submit($node)) { // Prepare node for saving
          node_save($node);
        }

      }
      else if (strcmp ($res, "INVALID") == 0) {
        watchdog('paypal', 'INVALID');
        // log for manual investigation
        watchdog('paypal', $res);
      }
    }
    fclose ($fp);
  }

  die();
}
